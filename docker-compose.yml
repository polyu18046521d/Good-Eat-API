version: "3.8"
services:
  prometheus:
    image: prom/prometheus
    container_name: prometheus
    volumes:
      - "./prometheus.yml:/etc/prometheus/prometheus.yml"
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
    ports:
      - 9090:9090
    # networks:
    #   - prometheus-service

  grafana:
    image: grafana/grafana
    container_name: grafana
    volumes:
      - ./grafana/config.ini:/etc/grafana/grafana.ini
      - ./grafana/provisioning:/etc/grafana/provisioning
      - ./grafana/dashboards:/usr/share/grafana/data
    ports:
      - 3000:3000

  elasticsearch:
    image: elasticsearch:7.14.2
    container_name: elasticsearch
    environment:
      - discovery.type=single-node
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    ports:
      - "9200:9200"
      - "9300:9300"
  
  kibana:
    image: kibana:7.14.2
    container_name: kibana
    ports:
      - "5601:5601"
    depends_on:
      - elasticsearch

  filebeat:
    image: docker.elastic.co/beats/filebeat:7.15.1
    container_name: filebeat
    command: filebeat -e -strict.perms=false
    user: root
    volumes:
      - "./logging:/usr/share/logging"
      - "./filebeat.yml:/usr/share/filebeat/filebeat.yml"
    depends_on:
      - elasticsearch

  reverse-proxy:
    image: nginx:1.17.10
    container_name: reverse_proxy
    depends_on:
      - auth-load-balancer
      - restaurant-load-balancer
      - tracking-load-balancer
    volumes:
      - ./reverse_proxy/nginx.conf:/etc/nginx/nginx.conf
    ports:
      - 80:80
    # networks:
    #   - api-gateway
  
  auth-load-balancer:
    image: nginx:1.17.10
    container_name: auth-load-balancer
    depends_on:
      - auth-api
    volumes:
      - ./load_balancers/auth/nginx.conf:/etc/nginx/nginx.conf
    ports:
      - 5000:5000
    restart: always

  auth-api:
    image: project-auth-api
    container_name: project-auth-api
    build: ./auth
    volumes:
      - ./auth:/code
      - ./logging/verify-service.log:/log/verify-service.log
    ports:
      - 5001:5001
    depends_on:
      - redis-db
    restart: always
    # networks:
    #   - api-gateway

  store-load-balancer:
    image: nginx:1.17.10
    container_name: store-load-balancer
    depends_on:
      - store-read-api
    volumes:
      - ./load_balancers/store/nginx.conf:/etc/nginx/nginx.conf
    ports:
      - 5210:5210
    # networks:
    #   - api-gateway
    #   - store-write-service
    #   - store-read-service
    #   - balancer-service
    restart: always
    
  store-read-api:
    image: project-store-read-api
    container_name: project-store-read-api
    build: ./store/read
    volumes:
      - "./store/read:/code"
      - ./logging/store-read-service.log:/log/store-read-service.log
    environment:
      MONGO_SERVER_HOST: store-read-db
    depends_on:
      - store-read-db
      - rabbitmq
      - redis-db
    ports:
      - 5201:5201
    # networks:
    #   - queue
    #   - api-gateway
    #   - store-read-service
    #   - prometheus-service
    restart: always
  
  store-read-db:
    image: mongo
    container_name: store-read-db
    environment:
      MONGO_INITDB_ROOT_USERNAME: comp3122
      MONGO_INITDB_ROOT_PASSWORD: 12345
      MONGO_INITDB_DATABASE: admin
    volumes:
      - ./store/mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js
    # networks:
    #   - store-read-service
  
  menu-load-balancer:
    image: nginx:1.17.10
    container_name: menu-load-balancer
    depends_on:
      - menu-write-api
      - menu-read-api
    volumes:
      - ./load_balancers/menu/nginx.conf:/etc/nginx/nginx.conf
    ports:
      - 5310:5310
    # networks:
    #   - api-gateway
    #   - menu-write-service
    #   - menu-read-service
    #   - balancer-service
    restart: always

  menu-read-api:
    image: project-menu-read-api
    container_name: project-menu-read-api
    build: ./menu/read
    environment:
      MONGO_SERVER_HOST: menu-read-db
    depends_on:
      - menu-read-db
      - redis-db
    ports:
      - 5301:5301
    # networks:
    #   - queue
    #   - api-gateway
    #   - menu-read-service
    #   - prometheus-service
    volumes:
      - ./menu/read:/code
      - ./logging/menu-read-service.log:/log/menu-read-service.log
    restart: always

  menu-read-db:
    image: mongo
    container_name: menu-read-db
    environment:
      MONGO_INITDB_ROOT_USERNAME: comp3122
      MONGO_INITDB_ROOT_PASSWORD: 12345
      MONGO_INITDB_DATABASE: admin
    volumes:
      - ./menu/mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js
    # networks:
    #   - menu-read-service

  menu-write-api:
    image: project-menu-write-api
    container_name: project-menu-write-api
    build: ./menu/write
    volumes:
      - ./menu/write:/code
      - ./logging/menu-write-service.log:/log/menu-write-service.log
    ports:
      - 5300:5300
    # networks:
    #   - queue
    #   - menu-write-service
    #   - prometheus-service
    environment:
      MONGO_SERVER_HOST: menu-write-db
    depends_on:
      - rabbitmq
      - menu-write-db
      - redis-db
    restart: always

  menu-write-db:
    image: mongo
    container_name: menu-write-db
    environment:
      MONGO_INITDB_ROOT_USERNAME: comp3122
      MONGO_INITDB_ROOT_PASSWORD: 12345
      MONGO_INITDB_DATABASE: admin
    volumes:
      - ./menu/mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js
    # networks:
    #   - menu-write-service
  
  restaurant-load-balancer:
    image: nginx:1.17.10
    container_name: restaurant-load-balancer
    depends_on:
      - restaurant-api
    volumes:
      - ./load_balancers/restaurant/nginx.conf:/etc/nginx/nginx.conf
    ports:
      - 5110:5110
    # networks:
    #   - api-gateway
    #   - restaurant-service
    #   - balancer-service
    restart: always

  restaurant-api:
    image: project-restaurant-api
    container_name: project-restaurant-api
    build: ./restaurant
    volumes:
      - ./restaurant:/code
      - ./logging/restaurant-service.log:/log/restaurant-service.log
    ports:
      - 5101:5101
    # networks:
    #   - queue
    #   - restaurant-service
    #   - prometheus-service
    environment:
      MONGO_SERVER_HOST: restaurant-db
    depends_on:
      - rabbitmq
      - restaurant-db
      - redis-db
    restart: always
  
  restaurant-db:
    image: mongo
    container_name: restaurant-db
    environment:
      MONGO_INITDB_ROOT_USERNAME: comp3122
      MONGO_INITDB_ROOT_PASSWORD: 12345
      MONGO_INITDB_DATABASE: admin
    volumes:
      - ./restaurant/mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js
    # networks:
    #   - restaurant-service

  tracking-load-balancer:
    image: nginx:1.17.10
    container_name: tracking-load-balancer
    depends_on:
      - tracking-api
    volumes:
      - ./load_balancers/tracking/nginx.conf:/etc/nginx/nginx.conf
    ports:
      - 5410:5410
    # networks:
    #   - api-gateway
    #   - tracking-service
    #   - balancer-service
    restart: always

  tracking-api:
    image: project-tracking-api
    container_name: project-tracking-api
    build: ./tracking
    volumes:
      - ./tracking:/code
      - ./logging/tracking-service.log:/log/tracking-service.log
    ports:
      - 5401:5401
    # networks:
    #   - api-gateway
    #   - queue
    #   - tracking-service
    #   - prometheus-service
    environment:
      MONGO_SERVER_HOST: tracking-db
    depends_on:
      - rabbitmq
      - tracking-db
      - redis-db
    restart: always
  
  tracking-db:
    image: mongo
    container_name: tracking-db
    environment:
      MONGO_INITDB_ROOT_USERNAME: comp3122
      MONGO_INITDB_ROOT_PASSWORD: 12345
      MONGO_INITDB_DATABASE: admin
    volumes:
      - ./tracking/mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js
    # networks:
    #   - tracking-service
    restart: always

  order-load-balancer:
    image: nginx:1.17.10
    container_name: order-load-balancer
    depends_on:
      - order-api
    volumes:
      - ./load_balancers/order/nginx.conf:/etc/nginx/nginx.conf
    ports:
      - 5510:5510
    # networks:
    #   - api-gateway
    #   - order-service
    #   - balancer-service
    restart: always

  order-api:
    image: project-order-api
    container_name: project-order-api
    build: ./order
    volumes:
      - ./order:/code
      - ./logging/order-service.log:/log/order-service.log
    ports:
      - 5501:5501
    # networks:
    #   - api-gateway
    #   - queue
    #   - order-service
    #   - prometheus-service
    environment:
      MONGO_SERVER_HOST: order-db
    depends_on:
      - rabbitmq
      - order-db
      - redis-db
    restart: always
  
  order-db:
    image: mongo
    container_name: order-db
    environment:
      MONGO_INITDB_ROOT_USERNAME: comp3122
      MONGO_INITDB_ROOT_PASSWORD: 12345
      MONGO_INITDB_DATABASE: admin
    volumes:
      - ./order/mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js
    # networks:
    #   - order-service
    restart: always

  rabbitmq:
    image: rabbitmq
    # networks:
    #   - queue

  redis-db:
    image: redis:latest
    container_name: redis

# networks:

#   prometheus-service:
#     driver: bridge
#   balancer-service:
#     driver: bridge

#   queue:
#     driver: bridge
#   api-gateway:
#     driver: bridge
  
#   store-read-service:
#     driver: bridge
#   store-write-service:
#     driver: bridge
  
#   menu-read-service:
#     driver: bridge
#   menu-write-service:
#     driver: bridge
  
#   restaurant-service:
#     driver: bridge

#   tracking-service:
#     driver: bridge

#   order-service:
#     driver: bridge